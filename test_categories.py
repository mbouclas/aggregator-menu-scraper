#!/usr/bin/env python3
"""
Test the enhanced category extraction for foody.com.cy scraper.
"""

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.scrapers.foody_scraper import FoodyScraper
from src.common.config import ScraperConfig
import json

def test_category_extraction():
    """Test the enhanced category extraction functionality."""
    
    print("=== TESTING ENHANCED CATEGORY EXTRACTION ===")
    print()
    
    # Load configuration
    config = ScraperConfig.from_markdown_file('scrapers/foody.md')
    print(f"‚úÖ Configuration loaded for {config.domain}")
    
    # Initialize scraper
    url = 'https://www.foody.com.cy/delivery/menu/costa-coffee'
    scraper = FoodyScraper(config, url)
    print(f"‚úÖ Scraper initialized for {url}")
    print()
    
    # Test scraping with enhanced category extraction
    print("üîÑ Running enhanced scraping with category linking...")
    result = scraper.scrape()
    
    # Analyze category results
    print(f"\n=== CATEGORY ANALYSIS ===")
    categories = result.get('categories', [])
    products = result.get('products', [])
    
    print(f"Categories found: {len(categories)}")
    print(f"Products found: {len(products)}")
    
    if categories:
        print(f"\n=== CATEGORY DETAILS ===")
        total_categorized_products = 0
        for i, category in enumerate(categories, 1):
            product_count = category.get('product_count', 0)
            source = category.get('source', 'unknown')
            print(f"{i}. {category['name']} ({category['id']})")
            print(f"   Products: {product_count}")
            print(f"   Source: {source}")
            print(f"   Description: {category.get('description', 'N/A')}")
            total_categorized_products += product_count
            print()
        
        print(f"Total products in categories: {total_categorized_products}")
    else:
        print("‚ùå No categories extracted")
    
    # Analyze product-category linking
    if products:
        print(f"=== PRODUCT-CATEGORY LINKING ===")
        category_usage = {}
        uncategorized_products = 0
        
        for product in products:
            category = product.get('category', 'Unknown')
            if category == 'Unknown' or not category:
                uncategorized_products += 1
            else:
                category_usage[category] = category_usage.get(category, 0) + 1
        
        print(f"Products with categories: {len(products) - uncategorized_products}")
        print(f"Uncategorized products: {uncategorized_products}")
        
        if category_usage:
            print(f"\nCategory usage by products:")
            for category, count in sorted(category_usage.items()):
                print(f"  {category}: {count} products")
    
    # Validate category-product consistency
    print(f"\n=== CONSISTENCY VALIDATION ===")
    
    # Check that all product categories exist in categories array
    product_categories = set(p.get('category', '') for p in products if p.get('category'))
    category_names = set(c['name'] for c in categories)
    
    missing_categories = product_categories - category_names
    if missing_categories:
        print(f"‚ùå Products reference missing categories: {missing_categories}")
    else:
        print(f"‚úÖ All product categories exist in categories array")
    
    # Check category product counts are accurate
    category_count_errors = []
    for category in categories:
        expected_count = sum(1 for p in products if p.get('category') == category['name'])
        actual_count = category.get('product_count', 0)
        if expected_count != actual_count:
            category_count_errors.append(f"{category['name']}: expected {expected_count}, got {actual_count}")
    
    if category_count_errors:
        print(f"‚ùå Category count mismatches:")
        for error in category_count_errors:
            print(f"  {error}")
    else:
        print(f"‚úÖ All category product counts are accurate")
    
    # Show JSON structure
    json_output = json.dumps(result, indent=2)
    print(f"\n=== JSON OUTPUT VALIDATION ===")
    print(f"JSON size: {len(json_output)} bytes")
    print(f"Valid JSON structure: ‚úÖ")
    
    # Show errors
    errors = result.get('errors', [])
    if errors:
        print(f"\n=== ERRORS ({len(errors)}) ===")
        for error in errors:
            print(f"- {error['type']}: {error['message']}")
    
    # Show sample category structure
    if categories:
        print(f"\n=== SAMPLE CATEGORY STRUCTURE ===")
        sample_category = categories[0]
        print(json.dumps(sample_category, indent=2))
    
    print(f"\n=== CATEGORY EXTRACTION TEST COMPLETE ===")
    return result

def main():
    """Main test execution."""
    try:
        result = test_category_extraction()
        
        # Summary
        categories = result.get('categories', [])
        products = result.get('products', [])
        
        print(f"\nüéØ ENHANCEMENT SUMMARY:")
        print(f"‚úÖ extract_categories() method enhanced with multiple strategies")
        print(f"‚úÖ Product-category linking implemented")
        print(f"‚úÖ Category product counts automatically updated")
        print(f"‚úÖ All product categories guaranteed to exist in categories array")
        print(f"‚úÖ JavaScript detection for category extraction")
        print(f"‚úÖ Fallback categories for graceful degradation")
        
        if categories:
            print(f"‚úÖ Found {len(categories)} categories with proper structure")
            if any(cat.get('product_count', 0) > 0 for cat in categories):
                print(f"‚úÖ Categories properly linked to products")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
